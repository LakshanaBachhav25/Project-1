1) What is React ?
-> React is a JavaScript library that allows developers to build user interfaces (UIs) for web and native platforms. React is a JavaScript library created by Facebook, React is a User Interface (UI) library, React is a tool for building UI components.

2) Features of ReactJS ?
-> 
a. JSX(JavaScript Syntax Extension):
JSX is a combination of HTML and JavaScript. You can embed JavaScript objects inside the HTML elements. JSX is not supported by the browsers, as a result, Babel compiler trans compile the code into JavaScript code. JSX makes codes easy and understandable. It is easy to learn if you know HTML and JavaScript.

b. Virtual DOM:
DOM stands for Document Object Model. It is the most important part of the web as it divides into modules and executes the code. Usually, JavaScript Frameworks updates the whole DOM at once, which makes the web application slow. But react uses virtual DOM which is an exact copy of real DOM. Whenever there is a modification in the web application, the whole virtual DOM is updated first and finds the difference between real DOM and Virtual DOM.

c. One-way Data Binding:
One-way data binding, the name itself says that it is a one-direction flow. The data in react flows only in one direction i.e. the data is transferred from top to bottom i.e. from parent components to child components. The properties(props) in the child component cannot return the data to its parent component but it can have communication with the parent components to modify the states according to the provided inputs.

d. Component-Based Architecture:
Reusability: Breaks down the UI into reusable components, making code modular and easier to maintain.
Scalability: Encourages the creation of a component library, promoting code reuse and speeding up development.

e. Server-Side Rendering (SSR):
Improved SEO: Renders initial HTML on the server, making it easier for search engines to index and rank your application.
Faster Initial Load Times: Delivers pre-rendered HTML to the client, resulting in faster initial page loads.

f. Cross-Platform Development with React Native:
Code Reusability: Share code between web and mobile applications, reducing development time and effort.
Native Performance: Delivers native-like performance on both iOS and Android platforms.

3) Why JavaScript for frontend development ?
->  
a. Dynamic Interactivity:
User Engagement: It empowers developers to create dynamic and interactive web pages that respond to user actions.   
Rich User Experiences: From simple form validations to complex animations, JavaScript enables the creation of engaging user experiences.   

b. Client-Side Scripting:
Reduced Server Load: By handling tasks on the client-side, JavaScript minimizes the need for server requests, improving performance and scalability.   
Faster Response Times: It enables real-time updates and instant feedback to user interactions, enhancing the overall user experience.   

c. Cross-Platform Compatibility:
Universal Reach: JavaScript runs seamlessly across different browsers and operating systems, ensuring a consistent user experience.   
Wide Adoption: Its widespread support and extensive community make it a versatile choice for web development.   

d. Powerful Frameworks and Libraries:
Increased Productivity: Frameworks like React, Angular, and Vue.js provide structured approaches to building complex web applications.   
Rapid Development: These frameworks offer reusable components, state management solutions, and other tools to accelerate development.   

e. Continuous Evolution:
Staying Ahead: The JavaScript ecosystem is constantly evolving, with new features and libraries being introduced regularly.   
Adaptability: This allows developers to build cutting-edge web applications that meet the demands of modern users.   

f. Seamless Integration with Other Technologies:
Full-Stack Development: JavaScript can be used for both frontend and backend development, enabling developers to build complete web applications using a single language.   
Versatile Applications: It can be used to create everything from simple websites to complex web applications, mobile apps, and even server-side applications.

4) What is DOM ?
-> DOM (Document Object Model)
 The DOM is a programming interface for web documents. It represents the structure of an HTML or XML document as a tree-like structure of nodes, where each node represents a specific element in the document.   

Difference Between DOM & Virtual DOM 

----------------------------------------------------------------------------------------------------------------------------------------
Feature        |                        DOM                                |           Virtual DOM                                     |
---------------|-----------------------------------------------------------|-----------------------------------------------------------|                                                                                                                                
Nature         | Real-time representation of the HTML structure.           | In-memory representation of the DOM.                      |
Manipulation   | Direct manipulation with JavaScript.	                   | Indirect manipulation through state changes.              |
Performance    | Can be slow for complex operations.                       | Efficient updates and batching.                           |
Usage	       | Directly used by JavaScript to interact with the browser. | Used by libraries like React to optimize DOM updates.     |
----------------------------------------------------------------------------------------------------------------------------------------                                                    

5) What are Hooks in ReactJS ?
-> React Hooks: A Game-Changer for Functional Components
React Hooks are a powerful addition to React 16.8 that allow you to use state and other React features within functional components. This means you can write cleaner, more concise, and reusable code without resorting to class components.   

Key Benefits of Hooks:

a. Simplified State Management:
useState Hook: Easily manage state within functional components, eliminating the need for class-based state management.   
useReducer Hook: Handle complex state updates with a reducer function, providing a more structured approach.   

b. Side Effect Handling:
useEffect Hook: Perform side effects like data fetching, subscriptions, or DOM manipulation. It's a flexible way to manage side effects based on component state and props.   

c. Custom Hooks for Reusability:
Create custom Hooks to encapsulate reusable stateful logic, promoting code modularity and sharing.   
Common Built-in Hooks:

useState: Manages state within functional components.   
useEffect: Performs side effects like data fetching or subscriptions.   
useContext: Provides access to global context values.   
useReducer: Handles complex state updates with a reducer function.   
useCallback: Memorizes callback functions to optimize performance.   
useMemo: Memorizes values to avoid unnecessary re-calculations.   
useRef: Creates a mutable reference object that persists across re-renders. 